rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to validate image file
    function isValidImage() {
      return request.resource.size < 10 * 1024 * 1024 && // Max 10MB
             request.resource.contentType.matches('image/.*');
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Bike images - stolen and found bikes
    match /bikes/{type}/{bikeId}/{imageId} {
      // Anyone authenticated can read bike images
      allow read: if isAuthenticated();
      
      // Users can upload images for their own bikes
      allow create: if isAuthenticated() && 
                       isValidImage() &&
                       request.resource.metadata.userId == request.auth.uid;
      
      // Only owner can update or delete
      allow update, delete: if isAuthenticated() && 
                               resource.metadata.userId == request.auth.uid;
    }
    
    // Chat images - images sent in chat messages
    match /chat/{roomId}/{messageId}/{imageId} {
      // Only chat participants can read
      allow read: if isAuthenticated() &&
                     request.auth.uid in firestore.get(/databases/(default)/documents/chatRooms/$(roomId)).data.participants;
      
      // Only participants can upload
      allow create: if isAuthenticated() && 
                       isValidImage() &&
                       request.auth.uid in firestore.get(/databases/(default)/documents/chatRooms/$(roomId)).data.participants &&
                       request.resource.metadata.senderId == request.auth.uid;
      
      // Cannot modify chat images once sent
      allow update, delete: if false;
    }
    
    // Profile images - user avatars
    match /profiles/{userId}/{imageId} {
      // Anyone authenticated can view profile images
      allow read: if isAuthenticated();
      
      // Users can only manage their own profile images
      allow create: if isOwner(userId) && isValidImage();
      allow update, delete: if isOwner(userId);
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}

